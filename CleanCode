#Clean Code读书笔记

##有意义的命名
* 名副其实

变量、函数或类的名称应该已经答复了所有的大问题，它应该告诉你，它为什么会存在，它做什么事，应该怎么用。如果名称需要注释来补充，那就不算是名副其实。
* 避免误导

必须避免留下掩藏代码本意的错误线索。应当避免使用与本意相悖的词。

比如，别用accountList来指一组账号，除非真是个List类型。可以用accountGroup或bunchOfAccounts。即便容器是个List，最好也不要在名称中写出容器类型名。

提防使用不同之处较小的名称，比如XYZControllerForEfficientHandlingOfStrings和XYZControlllerForEfficientStorageOfStrings。

以同样的方式拼写出同样的概念才是信息。拼写前后不一致就是误导。

* 做有意义的区分

如果名称必须相异，那么其意思也应该不同才对。

以数字命名是依义命名的对立面，这样的名称纯属误导。比如a1、a2。

**废话是另一种没有意义的区分，废话都是冗余**，假如有一个Product类，如果还有一个ProductInfo或者ProductData类，那么他们的名称虽然不同，意思却无区别。还有比如

    getActiveAccount()
    getActiveAccounts()
    getActiveAccountInfo()

* 使用读得出来的名称

使用能读得出来的单词。减少或者避免使用缩写。

* 使用可搜索的名称

比如如果使用单个字母的变量名，或者使用数字常量，那么在整个工程或者代码里搜索这些内容会变得很吃力。

* 避免使用编码

不必使用m前缀来表明成员变量，应当把类和函数做得足够小，消除成员前缀的需要。也可以使用this.xxx

在使用接口及用具体类实现的时候，如何来命名呢。如果接口和实现必须选一个来编码，宁肯选择实现。可以使用ShapeFactoryImpl。

* 避免思维映射

不应当让读者把你的名称翻译为他们熟知的名称，应该直截了当。比如单字母名称并不是好主意。

* 类名

类名和对象名应该是名词或名词短语，如Customer，WikiPage，Account和AddressParser.
避免使用Manager、Processor、Data、Info这样的类名。类名不应当是动词。

* 方法名

方法名应当是动词或动词短语，如postPayment，deletePage或save。属性访问器、修改器和断言应该根据其值命名，并依Javabean标准加上get、set和is前缀。

重载构造器时，使用描述了参数的静态工厂方法名。

    Complex fulcrumPoint = Complex.FromRealNumber(23.0);
    通常好于
    Complex fulcrumPoint = new Complex(23.0)
    
可以考虑将相应的构造器设置为private，强制使用这种命名手段

* 别扮可爱

* 每个概念对应一个词

给每个抽象概念选一个词，并且一以贯之。例如，使用fetch、retrieve和get来给多个类中的同种方法命名。

* 别用双关语

避免将同一个单词用于不同目的，同一术语用于不同概念。

比如在多个类里有很多add方法，该方法通过增加或连接两个现存值来获得新值，
如果现在要写一个新类，该类中有一个方法，把单个参数放到集合中。那么这个方法就不能再使用add，因为会产生歧义，可以考虑使用insert或者append。

* 使用解决方案领域名称

可以多使用计算机科学里的术语、算法名、模式名、数学术语。

* 使用源自所涉问题领域的名称

如果不能使用程序员熟悉的术语命名，那么可以使用所涉领域而来的名称。

* 添加有意义的语境

很少有名称是能自我说明的，你需要用有良好命名的类、函数或者名称空间来放置名称，给读者提供语境。如果没有这么做，那么给名称添加前缀就是最后一招了。

* 不要添加没用的语境

比如在一个GSD应用中，就没必要给每个类都加上GSD前缀。

###函数

* 短小





